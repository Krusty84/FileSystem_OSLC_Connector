// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package com.krusty84.fileconnector.services;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.inject.Inject;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.core.UriBuilder;

import org.apache.wink.json4j.JSONException;
import org.apache.wink.json4j.JSONObject;
import org.apache.log4j.xml.DOMConfigurator;
import org.apache.wink.json4j.JSONArray;
import org.eclipse.lyo.oslc4j.provider.json4j.JsonHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.eclipse.lyo.oslc4j.core.OSLC4JConstants;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.annotation.OslcCreationFactory;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialog;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialogs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcQueryCapability;
import org.eclipse.lyo.oslc4j.core.annotation.OslcService;
import org.eclipse.lyo.oslc4j.core.model.Compact;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;
import org.eclipse.lyo.oslc4j.core.model.Preview;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;

import com.krusty84.fileconnector.RestDelegate;
import com.krusty84.fileconnector.ServerConstants;
import com.krusty84.fileconnector.resources.Oslc_fsnspDomainConstants;
import com.krusty84.fileconnector.resources.Oslc_fsnspDomainConstants;
import com.krusty84.fileconnector.servlet.ApplicationBinder;
import com.krusty84.fileconnector.servlet.ServiceProviderCatalogSingleton;
import com.krusty84.fileconnector.resources.File;
import com.krusty84.fileconnector.resources.FileSystemConnect_Helper;
import com.krusty84.fileconnector.resources.GlobalConstantsVariables;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;

// Start of user code imports
// End of user code

// Start of user code pre_class_code
// End of user code
@OslcService(Oslc_fsnspDomainConstants.FILE_SYSTEM_NAMSPACE)
@Path("files")
public class ServiceProviderService1
{
    @Context private HttpServletRequest httpServletRequest;
    @Context private HttpServletResponse httpServletResponse;
    @Context private UriInfo uriInfo;
    @Inject  private RestDelegate delegate;

    //*krusty84, was added for using log4j
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(ServiceProviderService1.class.getSimpleName());
    // Start of user code class_attributes
    // End of user code

    // Start of user code class_methods
    // End of user code

    public ServiceProviderService1()
    {
       super();
       //*krusty84, was added call to debug reason
       System.out.println("Was Called: "+ServiceProviderService1.class);
       //*krusty84, was added call to get specific file in folder (aka ServiceProvider)
       FileSystemConnect_Helper.getFoldersContent(RestDelegate.pathToRootFolder, GlobalConstantsVariables.currentServiceProvider, RestDelegate.files);
       //*krusty84, was added for initialize log4j
       DOMConfigurator.configure("src/main/resources/log4j.xml");
    }

    private void addCORSHeaders (final HttpServletResponse httpServletResponse) {
        //UI preview can be blocked by CORS policy.
        //add select CORS headers to every response that is embedded in an iframe.
        httpServletResponse.addHeader("Access-Control-Allow-Origin", "*");
        httpServletResponse.addHeader("Access-Control-Allow-Methods", "GET, OPTIONS, HEAD");
        httpServletResponse.addHeader("Access-Control-Allow-Headers", "origin, content-type, accept, authorization");
        httpServletResponse.addHeader("Access-Control-Allow-Credentials", "true");
    }

    @OslcQueryCapability
    (
        title = "QueryCapability",
        label = "QueryCapability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_fsnspDomainConstants.FILE_PATH,
        resourceTypes = {Oslc_fsnspDomainConstants.FILE_TYPE},
        usages = {}
    )
    @GET
    @Path("query")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @Operation(
        summary = "Query capability for resources of type {" + Oslc_fsnspDomainConstants.FILE_LOCALNAME + "}",
        description = "Query capability for resources of type {" + "<a href=\"" + Oslc_fsnspDomainConstants.FILE_TYPE + "\">" + Oslc_fsnspDomainConstants.FILE_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_fsnspDomainConstants.FILE_PATH + "\">" + Oslc_fsnspDomainConstants.FILE_LOCALNAME + "</a>" + "}",
        responses = { 
            @ApiResponse(description = "default response", content = {@Content(mediaType = OslcMediaType.APPLICATION_RDF_XML), @Content(mediaType = OslcMediaType.APPLICATION_XML), @Content(mediaType = OslcMediaType.APPLICATION_JSON), @Content(mediaType = OslcMediaType.TEXT_TURTLE), @Content(mediaType = MediaType.TEXT_HTML)})
        }
    )
    public File[] queryFiles(
                                                    
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("oslc.prefix") final String prefix,
                                                     @QueryParam("oslc.paging") final String pagingString,
                                                     @QueryParam("page") final String pageString,
                                                     @QueryParam("oslc.pageSize") final String pageSizeString) throws IOException, ServletException
    {
        boolean paging=false;
        int page=0;
        int pageSize=20;
        if (null != pagingString) {
            paging = Boolean.parseBoolean(pagingString);
        }
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryFiles
        // Here additional logic can be implemented that complements main action taken in RestDelegate
        // End of user code

        List<File> resources = delegate.queryFiles(httpServletRequest, where, prefix, paging, page, pageSize);
        UriBuilder uriBuilder = UriBuilder.fromUri(uriInfo.getAbsolutePath())
            .queryParam("oslc.paging", "true")
            .queryParam("oslc.pageSize", pageSize)
            .queryParam("page", page);
        if (null != where) {
            uriBuilder.queryParam("oslc.where", where);
        }
        if (null != prefix) {
            uriBuilder.queryParam("oslc.prefix", prefix);
        }
        httpServletRequest.setAttribute("queryUri", uriBuilder.build().toString());
        //*krusty84, was added for debug reason
        logger.info("queryUri: "+uriBuilder.build().toString());
        if ((OSLC4JUtils.hasLyoStorePagingPreciseLimit() && resources.size() >= pageSize) 
            || (!OSLC4JUtils.hasLyoStorePagingPreciseLimit() && resources.size() > pageSize)) {
            resources = resources.subList(0, pageSize);
            uriBuilder.replaceQueryParam("page", page + 1);
            httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE, uriBuilder.build().toString());
        }
        return resources.toArray(new File [resources.size()]);
    }

    @GET
    @Path("query")
    @Produces({ MediaType.TEXT_HTML })
    @Operation(
        summary = "Query capability for resources of type {" + Oslc_fsnspDomainConstants.FILE_LOCALNAME + "}",
        description = "Query capability for resources of type {" + "<a href=\"" + Oslc_fsnspDomainConstants.FILE_TYPE + "\">" + Oslc_fsnspDomainConstants.FILE_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_fsnspDomainConstants.FILE_PATH + "\">" + Oslc_fsnspDomainConstants.FILE_LOCALNAME + "</a>" + "}",
        responses = { 
            @ApiResponse(description = "default response", content = {@Content(mediaType = OslcMediaType.APPLICATION_RDF_XML), @Content(mediaType = OslcMediaType.APPLICATION_XML), @Content(mediaType = OslcMediaType.APPLICATION_JSON), @Content(mediaType = OslcMediaType.TEXT_TURTLE), @Content(mediaType = MediaType.TEXT_HTML)})
        }
    )
    public void queryFilesAsHtml(
                                    
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("oslc.prefix") final String prefix,
                                       @QueryParam("oslc.paging") final String pagingString,
                                       @QueryParam("page") final String pageString,
                                       @QueryParam("oslc.pageSize") final String pageSizeString) throws ServletException, IOException
    {
        boolean paging=false;
        int page=0;
        int pageSize=20;
        if (null != pagingString) {
            paging = Boolean.parseBoolean(pagingString);
        }
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryFilesAsHtml
        // End of user code

        List<File> resources = delegate.queryFiles(httpServletRequest, where, prefix, paging, page, pageSize);

        if (resources!= null) {
            // Start of user code queryFilesAsHtml_setAttributes
            // End of user code
        	//*krusty84, was added call to debug reason
            //System.out.println("The Query was called"+"_from: "+GlobalConstantsVariables.currentServiceProvider+" service provider");
            //*krusty84, was added for debug reason
            logger.info("The Query was called,from: "+GlobalConstantsVariables.currentServiceProvider);
            
            UriBuilder uriBuilder = UriBuilder.fromUri(uriInfo.getAbsolutePath())
                .queryParam("oslc.paging", "true")
                .queryParam("oslc.pageSize", pageSize)
                .queryParam("page", page);
            if (null != where) {
                uriBuilder.queryParam("oslc.where", where);
            }
            if (null != prefix) {
                uriBuilder.queryParam("oslc.prefix", prefix);
            }
            httpServletRequest.setAttribute("queryUri", uriBuilder.build().toString());

        if ((OSLC4JUtils.hasLyoStorePagingPreciseLimit() && resources.size() >= pageSize) 
            || (!OSLC4JUtils.hasLyoStorePagingPreciseLimit() && resources.size() > pageSize)) {
                resources = resources.subList(0, pageSize);
                uriBuilder.replaceQueryParam("page", page + 1);
                httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE, uriBuilder.build().toString());
            }
            httpServletRequest.setAttribute("resources", resources);
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/krusty84/fileconnector/filescollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
            return;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcDialog
    (
         title = "SelectionDialog",
         label = "SelectionDialog",
         uri = "files/selector",
         hintWidth = "250px",
         hintHeight = "250px",
         resourceTypes = {Oslc_fsnspDomainConstants.FILE_TYPE},
         usages = {}
    )
    @GET
    @Path("selector")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public Response FileSelector(
        @QueryParam("terms") final String terms
        
        ) throws ServletException, IOException, JSONException
    {
        // Start of user code FileSelector_init
        // End of user code

        httpServletRequest.setAttribute("selectionUri",UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
        // Start of user code FileSelector_setAttributes
        // End of user code

        if (terms != null ) {
            httpServletRequest.setAttribute("terms", terms);
            final List<File> resources = delegate.FileSelector(httpServletRequest, terms);
            if (resources!= null) {
                JSONArray resourceArray = new JSONArray();
                for (File resource : resources) {
                    JSONObject r = new JSONObject();
                    r.put("oslc:label", resource.toString());
                    r.put("rdf:resource", resource.getAbout().toString());
                    r.put("Label", resource.toString());
                    // Start of user code FileSelector_setResponse
                    //TODO: Add any other attributes that are to be displayed in the search result
                    // End of user code
                    resourceArray.add(r);
                }
                JSONObject response = new JSONObject();
                response.put("oslc:results", resourceArray);
                return Response.ok(response.write()).build();
            }
            logger.error("A empty search should return an empty list and not NULL! "+Status.INTERNAL_SERVER_ERROR);
            throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);

        } else {
            httpServletRequest.setAttribute("resourceTypeLabel", "File");
            httpServletRequest.setAttribute("fieldsToList", "[\"Label\"]");
            // Start of user code FileSelector_setAttribute_fieldsToList
            //TODO: set the attribute "fieldsToList" to form the list of properties you want displayed in the search result
            // End of user code
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/krusty84/fileconnector/selectiondialog.jsp");
            rd.forward(httpServletRequest, httpServletResponse);
            return null;
        }
    }

    /**
     * Create a single File via RDF/XML, XML or JSON POST
     *
     * @throws IOException
     * @throws ServletException
     */
    @OslcCreationFactory
    (
         title = "CreationFactory",
         label = "CreationFactory",
         resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_fsnspDomainConstants.FILE_PATH},
         resourceTypes = {Oslc_fsnspDomainConstants.FILE_TYPE},
         usages = {}
    )
    @POST
    @Path("create")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON })
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @Operation(
        summary = "Creation factory for resources of type {" + Oslc_fsnspDomainConstants.FILE_LOCALNAME + "}",
        description = "Creation factory for resources of type {" + "<a href=\"" + Oslc_fsnspDomainConstants.FILE_TYPE + "\">" + Oslc_fsnspDomainConstants.FILE_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_fsnspDomainConstants.FILE_PATH + "\">" + Oslc_fsnspDomainConstants.FILE_LOCALNAME + "</a>" + "}",
        responses = { 
            @ApiResponse(description = "default response", content = {@Content(mediaType = OslcMediaType.APPLICATION_RDF_XML), @Content(mediaType = OslcMediaType.APPLICATION_XML), @Content(mediaType = OslcMediaType.APPLICATION_JSON), @Content(mediaType = OslcMediaType.TEXT_TURTLE)})
        }
    )
    public Response createFile(
            
            final File aResource
        ) throws IOException, ServletException
    {
        File newResource = delegate.createFile(httpServletRequest, aResource);
        httpServletResponse.setHeader("ETag", delegate.getETagFromFile(newResource));
        return Response.created(newResource.getAbout()).entity(newResource).header(ServerConstants.HDR_OSLC_VERSION, ServerConstants.OSLC_VERSION_V2).build();
    }

}
